print("Creating initial array")
for (tqdm in (1:1000000)){
age <- append(age,runif(1,0,100))
}
age <- runif(1000000,0,100)
age_pd <- data.frame('age'=age)
age <- round(runif(1000000,0,100))
?round
age <- round(runif(1000000,0,100),digits=0)
age_pd <- data.frame('age'=age)
age_np <- as.array(age)
inc <- function(x)
{
eval.parent(substitute(x <- x + 1))
}
age2 < inc(age)
age2 <- inc(age)
increment_age_np2 <- function(){
return(list(lambda = x+1,
x = age_np))
}
increment_age_np2
test<_increment_age_np2
test<-increment_age_np2
increment_age_np2 <- function(){
tmp < list(lambda = x+1, x = age_np)
return(tmp)
}
increment_age_np2 <- function(lambda = x+1, x = age_np){
tmp < list(lambda, x)
return(tmp)
}
test<-increment_age_np2()
increment_age_np2 <- function(lambda = x+1, x = age_np){
tmp <- list(lambda, x)
return(tmp)
}
test<-increment_age_np2()
ColumnNames <- setClass(
Class = "ColumnNames",
representation = representation(
#Used to record standard dataframe column names used throughout"""
LOCATION_DANGER = "character",  # Danger associated with a location
LOCATION_NAME = "character",  # Name of a location
LOCATION_ID = "character",  # Unique ID for each location
ACTIVITY_VENUES = "character",  # Venues an individual may visit. Appended to activity type, e.g. 'Retail_Venues'
ACTIVITY_FLOWS = "character",  # Flows to a venue for an individual. Appended to activity type, e.g. 'Retail_Flows'
ACTIVITY_TIME = "character",  # Amount of time an individual spends doing an activity. E.g. 'Retail_Time'
ACTIVITY_DURATION = "character", # Column to record proportion of the day that invividuals do the activity
INDIVIDUAL_AGE = "character", # Age column in the table of individuals
INDIVIDUAL_SEX = "character",  # Sex column in the table of individuals
INDIVIDUAL_ETH = "character"  # Ethnicity column in the table of individuals
),
)
ColumnNames.object <- ColumnNames(LOCATION_DANGER = "Danger",  # Danger associated with a location
LOCATION_NAME = "Location_Name",  # Name of a location
LOCATION_ID = "ID",  # Unique ID for each location
ACTIVITY_VENUES = "_Venues",  # Venues an individual may visit. Appended to activity type, e.g. 'Retail_Venues'
ACTIVITY_FLOWS = "_Flows",  # Flows to a venue for an individual. Appended to activity type, e.g. 'Retail_Flows'
ACTIVITY_TIME = "_Time",  # Amount of time an individual spends doing an activity. E.g. 'Retail_Time'
ACTIVITY_DURATION = "_Duration", # Column to record proportion of the day that invividuals do the activity
INDIVIDUAL_AGE = "DC1117EW_C_AGE", # Age column in the table of individuals
INDIVIDUAL_SEX = "DC1117EW_C_SEX",  # Sex column in the table of individuals
INDIVIDUAL_ETH = "DC2101EW_C_ETHPUK11"  # Ethnicity column in the table of individuals
)
View(ColumnNames.object)
MicrosimAnalysis <- setRefClass(
"MicrosimAnalysis",
#fields = list(
#    x = "ANY",
#    y = "numeric",
#    z = "character"
#),
methods = list(
population_distribution = function(cls, individuals: pd.DataFrame, variables: List[str]){
#Create a frequency distribtion of the population, using the given variable
param individuals: The DataFrame of the individual population
param variable: The variable(s) (DataFrame column(s)) on which to create a histogram. Either a single
string variable or a list of variables.
return: The matplotlib Figure object.
if type(variables) == str{ # If only one variable provided then make it into a list
variables = [variables]
}
# Check the columns exist in the dataframe
for var in variables{
if var not in individuals.columns{
raise Exception(f"Column {var} is not in the individuals dataframe.\n Possible columns",
f"to use are {individuals.columns}")
}
}
# Create main plot object
fig = plt.figure(figsize=(12, 14))
fig.tight_layout()
# Now add 'sub plots', i.e. plots for each of the variables
# Iterate over each variable, getting a counter (i) and the variable name (var)
for i, var in enumerate(variables){
# Create a new subplot. Currently one column with a new row for each plot.
ax = fig.add_subplot(len(variables), 1, i+1) # (rows, cols, index) (index used to distinguish each subplot)
# Subset the data using pandas.loc. Keep all rows but only select the column we want
data = individuals.loc[:, var]
ax.hist(data)
#ax.scatter(data.DateTime, data.Count, s=0.02, c="black")
ax.set_title(f"Histogram of {var}")
}
return(fig)
}
)
)
test <- "test"
class(test)
?setRefClass
install.packages("mixdist")
varaibles<- test
if (class(variables) == "character"){ # If only one variable provided then make it into a list
variables <- list(variables)
}
variables<-test
if (class(variables) == "character"){ # If only one variable provided then make it into a list
variables <- list(variables)
}
names(variables)
names(variabes)<-test
names(variables)<-test
names(variables)
individuals <- data.frame(test=rep(1,100),)
individuals <- data.frame(test=rep(1,100),poo=4)
if (all(!variables %in% names(individuals))) {
print(paste0(
variables[!variables %in% names(variables)],
" missing from df. They are not included in probabilities."
))
}
variables <- "boob"
if (class(variables) == "character"){ # If only one variable provided then make it into a list
tmp <- list(variables)
names(tmp)<-variables
varaibles<-tmp
}
if (class(variables) == "character"){ # If only one variable provided then make it into a list
tmp <- list(variables)
names(tmp)<-variables
variables<-tmp
}
if (all(!variables %in% names(individuals))) {
print(paste0(
variables[!variables %in% names(variables)],
" missing from df. They are not included in probabilities."
))
}
if (all(!variables %in% names(individuals))) {
print(paste0(
variables[!variables %in% names(individuals)],
" missing from df. They are not included in probabilities."
))
}
if (all(!variables %in% names(individuals))) {
print(paste0(
variables[!variables %in% names(individuals)],
" missing from df. Possible columns to use are", names(individuals)
))
}
if (all(!variables %in% names(individuals))) {
print(paste0(
variables[!variables %in% names(individuals)],
" missing from df. Possible columns to use are ", names(individuals)
))
}
names(individuals)
if (all(!variables %in% names(individuals))) {
print(paste(
variables[!variables %in% names(individuals)],
"missing from df. Possible columns to use are", names(individuals)
))
}
# Check the columns exist in the dataframe
if (all(!variables %in% names(individuals))) {
print(paste(variables[!variables %in% names(individuals)],
"missing from df. Possible columns to use are"))
print(paste(names(individuals)))
}
?python
?add_subplot
?subplot
length(variables)
?histogram
MicrosimAnalysis <- setRefClass(
"MicrosimAnalysis",
#fields = list(
#    x = "ANY",
#    y = "numeric",
#    z = "character"
#),
methods = list(
population_distribution = function(cls, individuals, variables){
#Create a frequency distribtion of the population, using the given variable
#param individuals: The DataFrame of the individual population
#param variable: The variable(s) (DataFrame column(s)) on which to create a histogram. Either a single
#string variable or a list of variables.
#return: The matplotlib Figure object.
if (class(variables) == "character"){ # If only one variable provided then make it into a list
tmp <- list(variables)
names(tmp)<-variables
variables<-tmp
}
# Check the columns exist in the dataframe
if (all(!variables %in% names(individuals))) {
print(paste(variables[!variables %in% names(individuals)],
"missing from df. Possible columns to use are:"))
print(paste(names(individuals)))
}
# Create main plot object
#fig = plt.figure(figsize=(12, 14))
#fig.tight_layout()
# Now add 'sub plots', i.e. plots for each of the variables
num_plots <- length(variables)
par(mfrow=c(num_plots,1))
# Iterate over each variable, getting a counter (i) and the variable name (var)
for (i in 1:num_plots){
# Create a new subplot. Currently one column with a new row for each plot.
#ax = fig.add_subplot(len(variables), 1, i+1) # (rows, cols, index) (index used to distinguish each subplot)
# Subset the data using pandas.loc. Keep all rows but only select the column we want
data <- individuals[, var]
hist(data, main=paste("Histogram of", var))
}
return(fig)
}
)
)
test <-MicrosimAnalysis()
test
?setRefClass
install.packages("dlm")
library(dlm)
data(NelPlo)
buildSu <- function(x) {
Vsd <- exp(x[1:2])
Vcorr <- tanh(x[3])
V <- Vsd %o% Vsd
V[1,2] <- V[2,1] <- V[1,2] * Vcorr
Wsd <- exp(x[4:5])
Wcorr <- tanh(x[6])
W <- Wsd %o% Wsd
W[1,2] <- W[2,1] <- W[1,2] * Wcorr
return(list(
m0 = rep(0,2),
C0 = 1e7 * diag(2),
FF = diag(2),
GG = diag(2),
V = V,
W = W))
}
suMLE <- dlmMLE(NelPlo, rep(0,6), buildSu); suMLE
buildSu(suMLE$par)[c("V","W")]
StructTS(NelPlo[,1], type="level") ## compare with W[1,1] and V[1,1]
StructTS(NelPlo[,2], type="level") ## compare with W[2,2] and V[2,2]
buildSu()
buildSu(1)
buildSu(suMLE$par)[c("V","W")]
suMLE
library(dlm)
data(NelPlo)
#library(ggplot2)
#library(sf)
#library(viridisLite)
library(reticulate)
library(tidyr)
Sys.time()
?write.csv
get.wd()
wd()
getwd()
paste(getwd(),"/output/",Sys.time(),sep="")
tmp.dir <- paste(getwd(),"/output/",Sys.time(),sep="")
dir.create(tmp.dir)
?dir.create
tmp.dir <- paste(getwd(),"/output/",Sys.time(),sep="")
dir.create(tmp.dir,recursive=TRUE)
lpsi <- -10 + 10*1
psi <- exp(lpsi) / (exp(lpsi) + 1)
lpsi <- -19 + 20*1
psi <- exp(lpsi) / (exp(lpsi) + 1)
lpsi <- -20 + 30*1
psi <- exp(lpsi) / (exp(lpsi) + 1)
lpsi <- -20 + 40*1
psi <- exp(lpsi) / (exp(lpsi) + 1)
lpsi <- -20 + 0*1
psi <- exp(lpsi) / (exp(lpsi) + 1)
lpsi <- -20 + 40*1
psi <- exp(lpsi) / (exp(lpsi) + 1)
dc <- read_delim("data/devon-tu_health/Devon_Complete.txt", delim = ",")
library(tidyr)
library(janitor)
library(readr)
library(mixdist)
library(dplyr)
dc <- read_delim("data/devon-tu_health/Devon_Complete.txt", delim = ",")
dc <- read_delim("/Users/JA610/PycharmProjects/RAMP-UA/data/devon-tu_health/Devon_Complete.txt", delim = ",")
colnames(dc)[16] <- "soc2010"
write_delim(dc,"/Users/JA610/PycharmProjects/RAMP-UA/data/devon-tu_health/Devon_Complete.txt", delim = ",")
lpsi <- -9 + 0.5*0.55
psi <- exp(lpsi) / (exp(lpsi) + 1)
lpsi <- -9 + 0.5*0
psi <- exp(lpsi) / (exp(lpsi) + 1)
lpsi <- -9 + 0.5*2
psi <- exp(lpsi) / (exp(lpsi) + 1)
lpsi <- -9 + 0.5*3
psi <- exp(lpsi) / (exp(lpsi) + 1)
lpsi <- -9 + 0.5*10
psi <- exp(lpsi) / (exp(lpsi) + 1)
log(5)
exp(5) / (exp(5) + 1)
data <- read.csv("/Users/JA610/PycharmProjects/RAMP-UA/R/py_int/output/2020-06-19 17:26:35/new_cases.csv")
View(data)
p <- ggplot(data=data,aes(x=X,y=V1)) +
geom_line()
library(ggplot2)
p <- ggplot(data=data,aes(x=X,y=V1)) +
geom_line()
p
data <- read.csv("/Users/JA610/PycharmProjects/RAMP-UA/R/py_int/output/2020-06-19 17:26:35/new_cases.csv")
p <- ggplot(data=data,aes(x=X,y=V1)) +
geom_line()
p
logit(0)
?scale
library(secr)
logit(0)
invlogit(-10)
library(ggplot2)
data <- read.csv("/Users/JA610/PycharmProjects/RAMP-UA/R/py_int/output/2020-07-03 13:33:55/new_cases.csv")
data2 <- read.csv("/Users/JA610/PycharmProjects/RAMP-UA/R/py_int/output/2020-07-04 06:54:14/new_cases.csv")
data3 <- read.csv("/Users/JA610/PycharmProjects/RAMP-UA/R/py_int/output/2020-07-03 21:10:41/new_cases.csv")
p <- ggplot(data=data,aes(y=V1, x=X)) +
geom_smooth(color="black",method="loess",span=1) +
geom_point(color="black") +
geom_smooth(data=data2,aes(y=V1, x=X),color="red",method="loess") +
geom_point(data=data2,aes(y=V1, x=X),color="red") +
geom_smooth(data=data3,aes(y=V1, x=X),color="blue",method="loess") +
geom_point(data=data3,aes(y=V1, x=X),color="blue")
p
data$csum <- c(cumsum(data$V1))
data2$csum <- c(cumsum(data2$V1))
data3$csum <- c(cumsum(data3$V1))
data4$csum <- c(cumsum(data4$V1))
data5$csum <- c(cumsum(data5$V1))
data6$csum <- c(cumsum(data6$V1))
data7$csum <- c(cumsum(data7$V1))
q <- ggplot(data=data,aes(y=csum, x=X)) +
geom_smooth(color="black",method="loess",span=1) +
geom_point(color="black") +
geom_smooth(data=data2,aes(y=csum, x=X),color="red",method="loess",span=1) +
geom_point(data=data2,aes(y=csum, x=X),color="red") +
geom_smooth(data=data3,aes(y=csum, x=X),color="blue",method="loess",span=1) +
geom_point(data=data3,aes(y=csum, x=X),color="blue")
q
data <- read.csv("/Users/JA610/PycharmProjects/RAMP-UA/R/py_int/output/2020-07-05 21:42:18/new_cases.csv")
data2 <- read.csv("/Users/JA610/PycharmProjects/RAMP-UA/R/py_int/output/2020-07-05 21:42:20/new_cases.csv")
data3 <- read.csv("/Users/JA610/PycharmProjects/RAMP-UA/R/py_int/output/2020-07-05 21:38:19/new_cases.csv")
p <- ggplot(data=data,aes(y=V1, x=X)) +
geom_smooth(color="black",method="loess",span=1) +
geom_point(color="black") +
geom_smooth(data=data2,aes(y=V1, x=X),color="red",method="loess") +
geom_point(data=data2,aes(y=V1, x=X),color="red") +
geom_smooth(data=data3,aes(y=V1, x=X),color="blue",method="loess") +
geom_point(data=data3,aes(y=V1, x=X),color="blue")
p
data$csum <- c(cumsum(data$V1))
data2$csum <- c(cumsum(data2$V1))
data3$csum <- c(cumsum(data3$V1))
data4$csum <- c(cumsum(data4$V1))
data5$csum <- c(cumsum(data5$V1))
data6$csum <- c(cumsum(data6$V1))
data7$csum <- c(cumsum(data7$V1))
q <- ggplot(data=data,aes(y=csum, x=X)) +
geom_smooth(color="black",method="loess",span=1) +
geom_point(color="black") +
geom_smooth(data=data2,aes(y=csum, x=X),color="red",method="loess") +
geom_point(data=data2,aes(y=csum, x=X),color="red") +
geom_smooth(data=data3,aes(y=csum, x=X),color="blue",method="loess") +
geom_point(data=data3,aes(y=csum, x=X),color="blue")
q
library(dplyr)
library(ggplot2)
library(patchwork)
library(tidyr)
setwd("~/PycharmProjects/RAMP-UA/R/py_int")
gam_cases <- readRDS("gam_fitted_PHE_cases.RDS")
gam_cases_df <- data.frame(day = 1:80, cases = gam_cases[1:80])
lfb <- list.dirs("~/University of Exeter/COVID19 Modelling - Documents/Micro_Simulation/Data/Processed_Data/Model_Output_New/Baseline/", full.names = TRUE)
lfb <- lfb[grepl("2020", lfb)]
all_reps_base <- NULL
for (i in 1:length(lfb)){
nc <- read.csv(paste0(lfb[i], "/new_cases.csv"))
df <- data.frame(run = i, day = nc$X, cases = nc$V1)
all_reps_base <- rbind(all_reps_base, df)
}
all_reps_median_base <- all_reps_base %>%
group_by(day) %>%
summarise(median_cases = median(cases))
baseline <- ggplot()+
geom_line(data = all_reps_base%>% filter(day >= 10 & day <= 60), aes(x = day, y = cases, group = run),alpha = 0.3)+
geom_line(data = all_reps_median_base%>% filter(day >= 10 & day <= 60), aes(x = day, y = median_cases), col = "red", size = 1)+
# geom_line(data = gam_cases_df, aes(x = day, y = cases), col = "red")+
ylab("Daily Cases")+
xlab("Day")+
#  geom_vline(xintercept = 38, linetype = "dashed")+
#ggtitle("Baseline")+
theme_bw()+
ylim(0, 750)+
theme(text = element_text(size=20))+
ggsave("baseline_red.png",path = "~/University of Exeter/COVID19 Modelling - Documents/Micro_Simulation/Data/Processed_Data/Model_Output_New/Plots/", width = 12, height = 8)
all_reps_cumsum <- all_reps_base
all_reps_cumsum$csum <- ave(all_reps_cumsum$cases, all_reps_cumsum$run, FUN=cumsum)
all_reps_cumsum_median_base <- all_reps_cumsum %>%
group_by(day) %>%
summarise(median_cases = median(csum))
cumsum_baseline <- ggplot()+
geom_line(data = all_reps_cumsum%>% filter(day >= 10 & day <= 60), aes(x = day, y = csum, group = run),alpha = 0.3)+
geom_line(data = all_reps_cumsum_median_base%>% filter(day >= 10 & day <= 60), aes(x = day, y = median_cases), col = "red", size = 1)+
# geom_line(data = gam_cases_df, aes(x = day, y = cases), col = "red")+
ylab("Cumulative Cases")+
xlab("Day")+
#  geom_vline(xintercept = 38, linetype = "dashed")+
#ggtitle("Baseline")+
ylim(0,17500) +
theme_bw()+
theme(text = element_text(size=20))+
ggsave("baseline_cumsum_red.png",path = "~/University of Exeter/COVID19 Modelling - Documents/Micro_Simulation/Data/Processed_Data/Model_Output_New/Plots/", width = 12, height = 8)
lf <- list.dirs("~/University of Exeter/COVID19 Modelling - Documents/Micro_Simulation/Data/Processed_Data/Model_Output_New/Lockdown_Early/", full.names = TRUE)
lf <- lf[grepl("2020", lf)]
all_reps <- NULL
for (i in 1:length(lf)){
nc <- read.csv(paste0(lf[i], "/new_cases.csv"))
df <- data.frame(run = i, day = nc$X, cases = nc$V1)
all_reps <- rbind(all_reps, df)
}
lfg <- list.files("~/University of Exeter/COVID19 Modelling - Documents/Micro_Simulation/Data/Processed_Data/Model_Output_New/Lockdown_Early/full_output/", full.names = TRUE)
#lfg <- lfg[1:8]
all_reps_gz <- NULL
#for (i in 1:length(lfg)){
#
#  lfgz <- vroom::vroom(paste0(lfg[i], "/Individuals.csv.gz"))
#  new_casesgz <- lfgz %>%
#    select(ID, starts_with("disease_status0")) %>%
#    pivot_longer(starts_with("disease")) %>%
#    group_by(name, value) %>%
#    tally() %>%
#    ungroup() %>%
#    filter(value == 0) %>%
#    mutate(run = i + length(lf),cases = c(NA, diff(695308-n)), day = as.numeric(gsub("disease_status0", "", name))) %>%
#    filter(day > 0) %>%
#    select(run, day, cases)
#
#  all_reps_gz <- rbind(all_reps_gz, new_casesgz)
#
#}
ggplot(all_reps_gz, aes(x = day, y = cases, group = run))+geom_line()
all_reps_all <- rbind(all_reps, all_reps_gz)
all_reps_median <- all_reps_all %>%
group_by(day) %>%
summarise(median_cases = median(cases))
lock_down_early <- ggplot()+
geom_line(data = all_reps_all %>% filter(day >= 10 & day <= 60), aes(x = day, y = cases, group = run),alpha = 0.3)+
geom_line(data = all_reps_median%>% filter(day >= 10 & day <= 60), aes(x = day, y = median_cases), col = "red", size = 1)+
# geom_line(data = gam_cases_df, aes(x = day, y = cases), col = "red")+
ylab("Daily Cases")+
xlab("Day")+
#  geom_vline(xintercept = 31, linetype = "dashed")+
#ggtitle("Lockdown a Week Earlier")+
theme_bw()+
ylim(0, 750)+
theme(text = element_text(size=20))+
ggsave("Early_Lockdown_red.png",path = "~/University of Exeter/COVID19 Modelling - Documents/Micro_Simulation/Data/Processed_Data/Model_Output_New/Plots/", width = 12, height = 8)
all_reps_cumsum <- all_reps_all
all_reps_cumsum$csum <- ave(all_reps_cumsum$cases, all_reps_cumsum$run, FUN=cumsum)
all_reps_cumsum_median_base <- all_reps_cumsum %>%
group_by(day) %>%
summarise(median_cases = median(csum))
cumsum_lock_down_early <- ggplot()+
geom_line(data = all_reps_cumsum%>% filter(day >= 10 & day <= 60), aes(x = day, y = csum, group = run),alpha = 0.3)+
geom_line(data = all_reps_cumsum_median_base%>% filter(day >= 10 & day <= 60), aes(x = day, y = median_cases), col = "red", size = 1)+
# geom_line(data = gam_cases_df, aes(x = day, y = cases), col = "red")+
ylab("Cumulative Cases")+
xlab("Day")+
#  geom_vline(xintercept = 38, linetype = "dashed")+
#ggtitle("Lockdown a Week Earlier")+
ylim(0,17500) +
theme_bw()+
theme(text = element_text(size=20))+
ggsave("early_lockdown_cumsum_red.png",path = "~/University of Exeter/COVID19 Modelling - Documents/Micro_Simulation/Data/Processed_Data/Model_Output_New/Plots/", width = 12, height = 8)
comparison <- ggplot()+
geom_line(data = all_reps_median%>% filter(day >= 10), aes(x = day, y = mean_cases), col = "black", size = 1, linetype = "dashed")+
geom_line(data = all_reps_median_base%>% filter(day >= 10), aes(x = day, y = mean_cases), col = "black", size = 1)+
theme_bw()+
ylim(0, 700)+
ylab("Daily Cases")+
xlab("Day")+
ggtitle("Comparison")
baseline/lock_down_early
cumsum_baseline/cumsum_lock_down_early
png("baseline.png", width=12,height=8,unit='in',res=300)
print(baseline)
dev.off()
png("lock_down_early.png", width=12,height=8,unit='in',res=300)
print(lock_down_early)
dev.off()
png("cumsum_baseline.png", width=7,height=4,unit='in',res=300)
print(cumsum_baseline)
dev.off()
png("cumsum_lock_down_early.png", width=7,height=4,unit='in',res=300)
print(cumsum_lock_down_early)
dev.off()
